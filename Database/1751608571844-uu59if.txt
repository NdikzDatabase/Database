const fs = require('fs');
const path = require('path');
const axios = require('axios');
const FormData = require('form-data');

const handler = async (m, { conn }) => {
  // Cek apakah ini reply
  const q = m.quoted ? m.quoted : (m.msg?.mimetype ? m : null);
  const mime = (q?.mimetype || "") || "";

  if (!q || (!mime && !q.text)) {
    return m.reply("📎 Balas media (gambar, dokumen, dsb) atau kirim langsung dengan caption perintah ini.");
  }

  let fileBuffer, fileName;

  if (mime) {
    try {
      await m.reply('📤 Sedang mengunduh media...');
      fileBuffer = await q.download?.() || await conn.downloadMediaMessage?.(q);
    } catch {
      return m.reply('❌ Gagal mendownload media.');
    }

    const ext = mime.includes('/') ? mime.split("/")[1].split(';')[0] : "bin";

    // Jika ada caption .tourl nama file kadang diambil dari caption
    const possibleNameFromCaption = m.text?.split(' ').find(v => v.includes('.') && !v.startsWith('.tourl'));

    // Nama file dari media atau fallback
    fileName = q.fileName || q.filename || q.name || `upload-${Date.now()}.${ext}`;
    if (possibleNameFromCaption) fileName = `upload-${Date.now()}-${Math.random().toString(36).slice(2, 8)}.${possibleNameFromCaption.split('.').pop()}`;
  } else if (q.text) {
    fileBuffer = Buffer.from(q.text, "utf-8");
    fileName = `text-${Date.now()}.txt`;
  }

  const tmpDir = path.resolve('./tmp');
  if (!fs.existsSync(tmpDir)) fs.mkdirSync(tmpDir, { recursive: true });

  const filepath = path.join(tmpDir, fileName);
  fs.writeFileSync(filepath, fileBuffer);

  await m.reply('📤 Mengunggah file ke GitHub...');

  try {
    const form = new FormData();
    form.append('file', fs.createReadStream(filepath));

    const res = await axios.post('https://upload-github.vercel.app/api/upload', form, {
      headers: form.getHeaders()
    });

    const { url, raw_url } = res.data;

    if (!url || !raw_url) throw new Error('❌ Tidak berhasil mendapatkan URL dari server.');

    await m.reply(`✅ *Upload Berhasil!*
📁 Nama: ${fileName}
🔗 URL: ${raw_url}
🌐 Host: githubusercontent.com`);
  } catch (err) {
    await m.reply(`❌ Gagal upload:\n${err.message}`);
  } finally {
    if (fs.existsSync(filepath)) fs.unlinkSync(filepath);
  }
};

handler.command = ['tourl'];
handler.tags = ['tools'];
handler.category = 'tools';
handler.description = 'Upload file ke GitHub dan dapatkan URL';

module.exports = handler;